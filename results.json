{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":6,"numPassedTests":182,"numPendingTestSuites":0,"numPendingTests":2,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":6,"numTotalTests":184,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1574165655728,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should have methods named \"insert\", \"remove\", and \"retrieve","location":null,"status":"passed","title":"should have methods named \"insert\", \"remove\", and \"retrieve"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should store values that were inserted","location":null,"status":"passed","title":"should store values that were inserted"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should not contain values that were not inserted","location":null,"status":"passed","title":"should not contain values that were not inserted"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should overwrite values that have the same key","location":null,"status":"passed","title":"should overwrite values that have the same key"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should not contain values that were removed","location":null,"status":"passed","title":"should not contain values that were removed"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should handle hash function collisions","location":null,"status":"passed","title":"should handle hash function collisions"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should double in size when needed","location":null,"status":"pending","title":"should double in size when needed"},{"ancestorTitles":["hashTable"],"failureMessages":[],"fullName":"hashTable should halve in size when needed","location":null,"status":"pending","title":"should halve in size when needed"}],"endTime":1574165659697,"message":"","name":"/home/hyunsung/바탕화면/codestates/im-sprint-data-structure/part-two/__test__/hashTable.test.js","startTime":1574165658065,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["tree"],"failureMessages":[],"fullName":"tree should have methods named \"addChild\" and \"contains\", and a property named \"value\"","location":null,"status":"passed","title":"should have methods named \"addChild\" and \"contains\", and a property named \"value\""},{"ancestorTitles":["tree"],"failureMessages":[],"fullName":"tree should add children to the tree","location":null,"status":"passed","title":"should add children to the tree"},{"ancestorTitles":["tree"],"failureMessages":[],"fullName":"tree should return true for a value that the tree contains","location":null,"status":"passed","title":"should return true for a value that the tree contains"},{"ancestorTitles":["tree"],"failureMessages":[],"fullName":"tree should return false for a value that was not added","location":null,"status":"passed","title":"should return false for a value that was not added"},{"ancestorTitles":["tree"],"failureMessages":[],"fullName":"tree should be able to add children to a tree's child","location":null,"status":"passed","title":"should be able to add children to a tree's child"},{"ancestorTitles":["tree"],"failureMessages":[],"fullName":"tree should correctly detect nested children","location":null,"status":"passed","title":"should correctly detect nested children"}],"endTime":1574165659930,"message":"","name":"/home/hyunsung/바탕화면/codestates/im-sprint-data-structure/part-two/__test__/tree.test.js","startTime":1574165658072,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should have a head and tail","location":null,"status":"passed","title":"should have a head and tail"},{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should have methods named \"addToTail\", \"removeHead\", and \"contains\"","location":null,"status":"passed","title":"should have methods named \"addToTail\", \"removeHead\", and \"contains\""},{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should designate a new tail when new nodes are added","location":null,"status":"passed","title":"should designate a new tail when new nodes are added"},{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should remove the head from the list when removeHead is called","location":null,"status":"passed","title":"should remove the head from the list when removeHead is called"},{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should return the value of the former head when removeHead is called","location":null,"status":"passed","title":"should return the value of the former head when removeHead is called"},{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should contain a value that was added","location":null,"status":"passed","title":"should contain a value that was added"},{"ancestorTitles":["linkedList"],"failureMessages":[],"fullName":"linkedList should not contain a value that was removed","location":null,"status":"passed","title":"should not contain a value that was removed"}],"endTime":1574165660063,"message":"","name":"/home/hyunsung/바탕화면/codestates/im-sprint-data-structure/part-two/__test__/linkedList.test.js","startTime":1574165658079,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["binarySearchTree"],"failureMessages":[],"fullName":"binarySearchTree should have methods named \"insert\", \"contains\", and \"depthFirstLog","location":null,"status":"passed","title":"should have methods named \"insert\", \"contains\", and \"depthFirstLog"},{"ancestorTitles":["binarySearchTree"],"failureMessages":[],"fullName":"binarySearchTree should insert values at the correct location in the tree","location":null,"status":"passed","title":"should insert values at the correct location in the tree"},{"ancestorTitles":["binarySearchTree"],"failureMessages":[],"fullName":"binarySearchTree should have a working \"contains\" method","location":null,"status":"passed","title":"should have a working \"contains\" method"},{"ancestorTitles":["binarySearchTree"],"failureMessages":[],"fullName":"binarySearchTree should execute a callback on every value in a tree using \"depthFirstLog\"","location":null,"status":"passed","title":"should execute a callback on every value in a tree using \"depthFirstLog\""}],"endTime":1574165660229,"message":"","name":"/home/hyunsung/바탕화면/codestates/im-sprint-data-structure/part-two/__test__/binarySearchTree.test.js","startTime":1574165658084,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should have methods named \"addNode\", \"contains\", \"removeNode\", \"addEdge\", \"hasEdge\", \"removeEdge\" and \"forEachNode\"","location":null,"status":"passed","title":"should have methods named \"addNode\", \"contains\", \"removeNode\", \"addEdge\", \"hasEdge\", \"removeEdge\" and \"forEachNode\""},{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should store values as nodes that were inserted","location":null,"status":"passed","title":"should store values as nodes that were inserted"},{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should remove nodes that were inserted","location":null,"status":"passed","title":"should remove nodes that were inserted"},{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should create edges between two nodes","location":null,"status":"passed","title":"should create edges between two nodes"},{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should remove edges between nodes","location":null,"status":"passed","title":"should remove edges between nodes"},{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should remove edges between nodes when a node is removed","location":null,"status":"passed","title":"should remove edges between nodes when a node is removed"},{"ancestorTitles":["graph"],"failureMessages":[],"fullName":"graph should execute a callback on each node in the graph","location":null,"status":"passed","title":"should execute a callback on each node in the graph"}],"endTime":1574165660266,"message":"","name":"/home/hyunsung/바탕화면/codestates/im-sprint-data-structure/part-two/__test__/graph.test.js","startTime":1574165658107,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does not extend the constructor function's prototype","location":null,"status":"passed","title":"does not extend the constructor function's prototype"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does not reference the keyword this","location":null,"status":"passed","title":"does not reference the keyword this"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does reference the return keyword","location":null,"status":"passed","title":"does reference the return keyword"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does declare variables","location":null,"status":"passed","title":"does declare variables"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does store methods without use of a prototype chain","location":null,"status":"passed","title":"does store methods without use of a prototype chain"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["functional stack","stack shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional stack stack shared behavior functional instantiation style does not reuse methods across multiple instances","location":null,"status":"passed","title":"does not reuse methods across multiple instances"},{"ancestorTitles":["functional stack","stack shared behavior"],"failureMessages":[],"fullName":"functional stack stack shared behavior reports a size of zero for a new stack","location":null,"status":"passed","title":"reports a size of zero for a new stack"},{"ancestorTitles":["functional stack","stack shared behavior"],"failureMessages":[],"fullName":"functional stack stack shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["functional stack","stack shared behavior"],"failureMessages":[],"fullName":"functional stack stack shared behavior does not error when removing from an empty stack","location":null,"status":"passed","title":"does not error when removing from an empty stack"},{"ancestorTitles":["functional stack","stack shared behavior"],"failureMessages":[],"fullName":"functional stack stack shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["functional stack","stack shared behavior"],"failureMessages":[],"fullName":"functional stack stack shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["functional stack","stack shared behavior"],"failureMessages":[],"fullName":"functional stack stack shared behavior allows sequentially additing and removing items","location":null,"status":"passed","title":"allows sequentially additing and removing items"},{"ancestorTitles":["functional stack","stack-specific behavior"],"failureMessages":[],"fullName":"functional stack stack-specific behavior removes the most recently added of two items","location":null,"status":"passed","title":"removes the most recently added of two items"},{"ancestorTitles":["functional stack","stack-specific behavior"],"failureMessages":[],"fullName":"functional stack stack-specific behavior removes the newest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the newest item, after newer items have already been added and removed"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does not extend the constructor function's prototype","location":null,"status":"passed","title":"does not extend the constructor function's prototype"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does not reference the keyword this","location":null,"status":"passed","title":"does not reference the keyword this"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does reference the return keyword","location":null,"status":"passed","title":"does reference the return keyword"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does declare variables","location":null,"status":"passed","title":"does declare variables"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does store methods without use of a prototype chain","location":null,"status":"passed","title":"does store methods without use of a prototype chain"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["functional queue","queue shared behavior","functional instantiation style"],"failureMessages":[],"fullName":"functional queue queue shared behavior functional instantiation style does not reuse methods across multiple instances","location":null,"status":"passed","title":"does not reuse methods across multiple instances"},{"ancestorTitles":["functional queue","queue shared behavior"],"failureMessages":[],"fullName":"functional queue queue shared behavior reports a size of zero for a new queue","location":null,"status":"passed","title":"reports a size of zero for a new queue"},{"ancestorTitles":["functional queue","queue shared behavior"],"failureMessages":[],"fullName":"functional queue queue shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["functional queue","queue shared behavior"],"failureMessages":[],"fullName":"functional queue queue shared behavior does not error when removing from an empty queue","location":null,"status":"passed","title":"does not error when removing from an empty queue"},{"ancestorTitles":["functional queue","queue shared behavior"],"failureMessages":[],"fullName":"functional queue queue shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["functional queue","queue shared behavior"],"failureMessages":[],"fullName":"functional queue queue shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["functional queue","queue shared behavior"],"failureMessages":[],"fullName":"functional queue queue shared behavior allows sequentially adding and removing items","location":null,"status":"passed","title":"allows sequentially adding and removing items"},{"ancestorTitles":["functional queue","queue-specific behavior"],"failureMessages":[],"fullName":"functional queue queue-specific behavior removes the least recently added of two items","location":null,"status":"passed","title":"removes the least recently added of two items"},{"ancestorTitles":["functional queue","queue-specific behavior"],"failureMessages":[],"fullName":"functional queue queue-specific behavior removes the oldest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the oldest item, after newer items have already been added and removed"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does not extend the constructor function's prototype","location":null,"status":"passed","title":"does not extend the constructor function's prototype"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does not reference the keyword this","location":null,"status":"passed","title":"does not reference the keyword this"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does reference the return keyword","location":null,"status":"passed","title":"does reference the return keyword"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does declare variables","location":null,"status":"passed","title":"does declare variables"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does store methods without use of a prototype chain","location":null,"status":"passed","title":"does store methods without use of a prototype chain"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["functional-shared stack","stack shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior functional-shared instantiation style does reuse methods across multiple instances","location":null,"status":"passed","title":"does reuse methods across multiple instances"},{"ancestorTitles":["functional-shared stack","stack shared behavior"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior reports a size of zero for a new stack","location":null,"status":"passed","title":"reports a size of zero for a new stack"},{"ancestorTitles":["functional-shared stack","stack shared behavior"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["functional-shared stack","stack shared behavior"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior does not error when removing from an empty stack","location":null,"status":"passed","title":"does not error when removing from an empty stack"},{"ancestorTitles":["functional-shared stack","stack shared behavior"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["functional-shared stack","stack shared behavior"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["functional-shared stack","stack shared behavior"],"failureMessages":[],"fullName":"functional-shared stack stack shared behavior allows sequentially additing and removing items","location":null,"status":"passed","title":"allows sequentially additing and removing items"},{"ancestorTitles":["functional-shared stack","stack-specific behavior"],"failureMessages":[],"fullName":"functional-shared stack stack-specific behavior removes the most recently added of two items","location":null,"status":"passed","title":"removes the most recently added of two items"},{"ancestorTitles":["functional-shared stack","stack-specific behavior"],"failureMessages":[],"fullName":"functional-shared stack stack-specific behavior removes the newest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the newest item, after newer items have already been added and removed"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does not extend the constructor function's prototype","location":null,"status":"passed","title":"does not extend the constructor function's prototype"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does not reference the keyword this","location":null,"status":"passed","title":"does not reference the keyword this"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does reference the return keyword","location":null,"status":"passed","title":"does reference the return keyword"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does declare variables","location":null,"status":"passed","title":"does declare variables"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does store methods without use of a prototype chain","location":null,"status":"passed","title":"does store methods without use of a prototype chain"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["functional-shared queue","queue shared behavior","functional-shared instantiation style"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior functional-shared instantiation style does reuse methods across multiple instances","location":null,"status":"passed","title":"does reuse methods across multiple instances"},{"ancestorTitles":["functional-shared queue","queue shared behavior"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior reports a size of zero for a new queue","location":null,"status":"passed","title":"reports a size of zero for a new queue"},{"ancestorTitles":["functional-shared queue","queue shared behavior"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["functional-shared queue","queue shared behavior"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior does not error when removing from an empty queue","location":null,"status":"passed","title":"does not error when removing from an empty queue"},{"ancestorTitles":["functional-shared queue","queue shared behavior"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["functional-shared queue","queue shared behavior"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["functional-shared queue","queue shared behavior"],"failureMessages":[],"fullName":"functional-shared queue queue shared behavior allows sequentially adding and removing items","location":null,"status":"passed","title":"allows sequentially adding and removing items"},{"ancestorTitles":["functional-shared queue","queue-specific behavior"],"failureMessages":[],"fullName":"functional-shared queue queue-specific behavior removes the least recently added of two items","location":null,"status":"passed","title":"removes the least recently added of two items"},{"ancestorTitles":["functional-shared queue","queue-specific behavior"],"failureMessages":[],"fullName":"functional-shared queue queue-specific behavior removes the oldest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the oldest item, after newer items have already been added and removed"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does not extend the constructor function's prototype","location":null,"status":"passed","title":"does not extend the constructor function's prototype"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does not reference the keyword this","location":null,"status":"passed","title":"does not reference the keyword this"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does reference the return keyword","location":null,"status":"passed","title":"does reference the return keyword"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does declare variables","location":null,"status":"passed","title":"does declare variables"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does not store methods without use of a prototype chain","location":null,"status":"passed","title":"does not store methods without use of a prototype chain"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["prototypal stack","stack shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior prototypal instantiation style does reuse methods across multiple instances","location":null,"status":"passed","title":"does reuse methods across multiple instances"},{"ancestorTitles":["prototypal stack","stack shared behavior"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior reports a size of zero for a new stack","location":null,"status":"passed","title":"reports a size of zero for a new stack"},{"ancestorTitles":["prototypal stack","stack shared behavior"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["prototypal stack","stack shared behavior"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior does not error when removing from an empty stack","location":null,"status":"passed","title":"does not error when removing from an empty stack"},{"ancestorTitles":["prototypal stack","stack shared behavior"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["prototypal stack","stack shared behavior"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["prototypal stack","stack shared behavior"],"failureMessages":[],"fullName":"prototypal stack stack shared behavior allows sequentially additing and removing items","location":null,"status":"passed","title":"allows sequentially additing and removing items"},{"ancestorTitles":["prototypal stack","stack-specific behavior"],"failureMessages":[],"fullName":"prototypal stack stack-specific behavior removes the most recently added of two items","location":null,"status":"passed","title":"removes the most recently added of two items"},{"ancestorTitles":["prototypal stack","stack-specific behavior"],"failureMessages":[],"fullName":"prototypal stack stack-specific behavior removes the newest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the newest item, after newer items have already been added and removed"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does not extend the constructor function's prototype","location":null,"status":"passed","title":"does not extend the constructor function's prototype"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does not reference the keyword this","location":null,"status":"passed","title":"does not reference the keyword this"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does reference the return keyword","location":null,"status":"passed","title":"does reference the return keyword"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does declare variables","location":null,"status":"passed","title":"does declare variables"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does not store methods without use of a prototype chain","location":null,"status":"passed","title":"does not store methods without use of a prototype chain"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["prototypal queue","queue shared behavior","prototypal instantiation style"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior prototypal instantiation style does reuse methods across multiple instances","location":null,"status":"passed","title":"does reuse methods across multiple instances"},{"ancestorTitles":["prototypal queue","queue shared behavior"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior reports a size of zero for a new queue","location":null,"status":"passed","title":"reports a size of zero for a new queue"},{"ancestorTitles":["prototypal queue","queue shared behavior"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["prototypal queue","queue shared behavior"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior does not error when removing from an empty queue","location":null,"status":"passed","title":"does not error when removing from an empty queue"},{"ancestorTitles":["prototypal queue","queue shared behavior"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["prototypal queue","queue shared behavior"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["prototypal queue","queue shared behavior"],"failureMessages":[],"fullName":"prototypal queue queue shared behavior allows sequentially adding and removing items","location":null,"status":"passed","title":"allows sequentially adding and removing items"},{"ancestorTitles":["prototypal queue","queue-specific behavior"],"failureMessages":[],"fullName":"prototypal queue queue-specific behavior removes the least recently added of two items","location":null,"status":"passed","title":"removes the least recently added of two items"},{"ancestorTitles":["prototypal queue","queue-specific behavior"],"failureMessages":[],"fullName":"prototypal queue queue-specific behavior removes the oldest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the oldest item, after newer items have already been added and removed"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does extend the constructor function's prototype","location":null,"status":"passed","title":"does extend the constructor function's prototype"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does reference the keyword this","location":null,"status":"passed","title":"does reference the keyword this"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does not reference the return keyword","location":null,"status":"passed","title":"does not reference the return keyword"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does not declare variables","location":null,"status":"passed","title":"does not declare variables"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does not store methods without use of a prototype chain","location":null,"status":"passed","title":"does not store methods without use of a prototype chain"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior pseudoclassical instantiation style does reuse methods across multiple instances","location":null,"status":"passed","title":"does reuse methods across multiple instances"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior reports a size of zero for a new stack","location":null,"status":"passed","title":"reports a size of zero for a new stack"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior does not error when removing from an empty stack","location":null,"status":"passed","title":"does not error when removing from an empty stack"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["pseudoclassical stack","stack shared behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack shared behavior allows sequentially additing and removing items","location":null,"status":"passed","title":"allows sequentially additing and removing items"},{"ancestorTitles":["pseudoclassical stack","stack-specific behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack-specific behavior removes the most recently added of two items","location":null,"status":"passed","title":"removes the most recently added of two items"},{"ancestorTitles":["pseudoclassical stack","stack-specific behavior"],"failureMessages":[],"fullName":"pseudoclassical stack stack-specific behavior removes the newest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the newest item, after newer items have already been added and removed"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style makes new instances that delegate to appropriate prototype object","location":null,"status":"passed","title":"makes new instances that delegate to appropriate prototype object"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style has a .prototype.constructor property that points back to the constructor itself","location":null,"status":"passed","title":"has a .prototype.constructor property that points back to the constructor itself"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does not extend the constructor function","location":null,"status":"passed","title":"does not extend the constructor function"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does extend the constructor function's prototype","location":null,"status":"passed","title":"does extend the constructor function's prototype"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does reference the keyword this","location":null,"status":"passed","title":"does reference the keyword this"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does not reference the return keyword","location":null,"status":"passed","title":"does not reference the return keyword"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does not declare variables","location":null,"status":"passed","title":"does not declare variables"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does store properties without use of a prototype chain","location":null,"status":"passed","title":"does store properties without use of a prototype chain"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does not store methods without use of a prototype chain","location":null,"status":"passed","title":"does not store methods without use of a prototype chain"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does not reuse non-function objects across multiple instances","location":null,"status":"passed","title":"does not reuse non-function objects across multiple instances"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior","pseudoclassical instantiation style"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior pseudoclassical instantiation style does reuse methods across multiple instances","location":null,"status":"passed","title":"does reuse methods across multiple instances"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior reports a size of zero for a new queue","location":null,"status":"passed","title":"reports a size of zero for a new queue"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior reports a size of 2 after adding two items","location":null,"status":"passed","title":"reports a size of 2 after adding two items"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior does not error when removing from an empty queue","location":null,"status":"passed","title":"does not error when removing from an empty queue"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior reports a size of 1 after adding two items and removing one","location":null,"status":"passed","title":"reports a size of 1 after adding two items and removing one"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior reports a size of 0 after removing more items than were added","location":null,"status":"passed","title":"reports a size of 0 after removing more items than were added"},{"ancestorTitles":["pseudoclassical queue","queue shared behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue shared behavior allows sequentially adding and removing items","location":null,"status":"passed","title":"allows sequentially adding and removing items"},{"ancestorTitles":["pseudoclassical queue","queue-specific behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue-specific behavior removes the least recently added of two items","location":null,"status":"passed","title":"removes the least recently added of two items"},{"ancestorTitles":["pseudoclassical queue","queue-specific behavior"],"failureMessages":[],"fullName":"pseudoclassical queue queue-specific behavior removes the oldest item, after newer items have already been added and removed","location":null,"status":"passed","title":"removes the oldest item, after newer items have already been added and removed"}],"endTime":1574165660791,"message":"","name":"/home/hyunsung/바탕화면/codestates/im-sprint-data-structure/part-one/__test__/index.test.js","startTime":1574165658099,"status":"passed","summary":""}],"wasInterrupted":false}